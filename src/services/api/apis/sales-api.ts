/* tslint:disable */
/* eslint-disable */
/**
 * Conifer.NFT.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiErrorResponse } from '../models';
import { BuyOrder } from '../models';
import { EndGiveawayRequestModel } from '../models';
import { ProblemDetails } from '../models';
import { Sale } from '../models';
import { SaleOfferResponseModel } from '../models';
import { SaleStatusResponse } from '../models';
import { SaleWithAssets } from '../models';
import { SaleWithPhysicalAsset } from '../models';
import { UpdateAuctionEndTimeRequest } from '../models';
import { UpdateAuctionStartTimeRequest } from '../models';
import { UpdateSaleRequestModel } from '../models';
import { UserOfferRequestModel } from '../models';
import { UserOfferResponse } from '../models';
import { UserOrder } from '../models';
import { UserSaleResponseModel } from '../models';
/**
 * SalesApi - axios parameter creator
 * @export
 */
export const SalesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} buyOrderId 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesAcceptOfferBuyOrderIdPost: async (buyOrderId: string, nftName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buyOrderId' is not null or undefined
            if (buyOrderId === null || buyOrderId === undefined) {
                throw new RequiredError('buyOrderId','Required parameter buyOrderId was null or undefined when calling apiV1SalesAcceptOfferBuyOrderIdPost.');
            }
            const localVarPath = `/api/v1/Sales/acceptOffer/{buyOrderId}`
                .replace(`{${"buyOrderId"}}`, encodeURIComponent(String(buyOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nftName !== undefined) {
                localVarQueryParameter['nftName'] = nftName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<Sale>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesBulkCreatePost: async (body?: Array<Sale>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/BulkCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesBuyorderIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SalesBuyorderIdGet.');
            }
            const localVarPath = `/api/v1/Sales/buyorder/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAuctionEndTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesCancelAuctionPost: async (body?: UpdateAuctionEndTimeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/CancelAuction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} buyOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesCancelofferBuyOrderIdDelete: async (buyOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buyOrderId' is not null or undefined
            if (buyOrderId === null || buyOrderId === undefined) {
                throw new RequiredError('buyOrderId','Required parameter buyOrderId was null or undefined when calling apiV1SalesCancelofferBuyOrderIdDelete.');
            }
            const localVarPath = `/api/v1/Sales/canceloffer/{buyOrderId}`
                .replace(`{${"buyOrderId"}}`, encodeURIComponent(String(buyOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} walletAssetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesCancelsaleWalletAssetIdPost: async (walletAssetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAssetId' is not null or undefined
            if (walletAssetId === null || walletAssetId === undefined) {
                throw new RequiredError('walletAssetId','Required parameter walletAssetId was null or undefined when calling apiV1SalesCancelsaleWalletAssetIdPost.');
            }
            const localVarPath = `/api/v1/Sales/cancelsale/{walletAssetId}`
                .replace(`{${"walletAssetId"}}`, encodeURIComponent(String(walletAssetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BuyOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesCreateBuyOrderPost: async (body?: BuyOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/CreateBuyOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaleWithAssets} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesCreatePost: async (body?: SaleWithAssets, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesDeleteSaleSaleIdDelete: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesDeleteSaleSaleIdDelete.');
            }
            const localVarPath = `/api/v1/Sales/deleteSale/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAuctionEndTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesEndAuctionPost: async (body?: UpdateAuctionEndTimeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/EndAuction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EndGiveawayRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesEndGiveawayPost: async (body?: EndGiveawayRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/EndGiveaway`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {string} livestreamId 
         * @param {number} [quantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesEndlivesaleSaleIdLivestreamIdPost: async (saleId: string, livestreamId: string, quantity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesEndlivesaleSaleIdLivestreamIdPost.');
            }
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1SalesEndlivesaleSaleIdLivestreamIdPost.');
            }
            const localVarPath = `/api/v1/Sales/endlivesale/{saleId}/{livestreamId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)))
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesEnterGiveawaySaleIdPost: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesEnterGiveawaySaleIdPost.');
            }
            const localVarPath = `/api/v1/Sales/enterGiveaway/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserOfferRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesGetOffersForUserPost: async (body?: UserOfferRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/getOffersForUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesGetSalesSoldInMarketplaceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/GetSalesSoldInMarketplace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesGetUserAssetsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/GetUserAssets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesGetUserOfferForSaleSaleIdGet: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesGetUserOfferForSaleSaleIdGet.');
            }
            const localVarPath = `/api/v1/Sales/getUserOfferForSale/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesGetUserPhysicalOrdersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/GetUserPhysicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesGiveawayEntryCountSaleIdPost: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesGiveawayEntryCountSaleIdPost.');
            }
            const localVarPath = `/api/v1/Sales/giveawayEntryCount/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SalesIdGet.');
            }
            const localVarPath = `/api/v1/Sales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesIdGetSaleStatusGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SalesIdGetSaleStatusGet.');
            }
            const localVarPath = `/api/v1/Sales/id/GetSaleStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesIdGetWinningBuyOrderGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SalesIdGetWinningBuyOrderGet.');
            }
            const localVarPath = `/api/v1/Sales/{id}/GetWinningBuyOrder`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesIdPhysicalGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SalesIdPhysicalGet.');
            }
            const localVarPath = `/api/v1/Sales/{id}/physical`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesIsGiveawayEnteredSaleIdPost: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesIsGiveawayEnteredSaleIdPost.');
            }
            const localVarPath = `/api/v1/Sales/isGiveawayEntered/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} walletAssetId 
         * @param {SaleWithAssets} [body] 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesListforsaleWalletAssetIdPost: async (walletAssetId: string, body?: SaleWithAssets, nftName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletAssetId' is not null or undefined
            if (walletAssetId === null || walletAssetId === undefined) {
                throw new RequiredError('walletAssetId','Required parameter walletAssetId was null or undefined when calling apiV1SalesListforsaleWalletAssetIdPost.');
            }
            const localVarPath = `/api/v1/Sales/listforsale/{walletAssetId}`
                .replace(`{${"walletAssetId"}}`, encodeURIComponent(String(walletAssetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nftName !== undefined) {
                localVarQueryParameter['nftName'] = nftName;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesMarkOrderAsDeliveredOrderIdPost: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling apiV1SalesMarkOrderAsDeliveredOrderIdPost.');
            }
            const localVarPath = `/api/v1/Sales/markOrderAsDelivered/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOffersSaleIdGet: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesOffersSaleIdGet.');
            }
            const localVarPath = `/api/v1/Sales/offers/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesParentParentIdGet: async (parentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new RequiredError('parentId','Required parameter parentId was null or undefined when calling apiV1SalesParentParentIdGet.');
            }
            const localVarPath = `/api/v1/Sales/parent/{parentId}`
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesPhysicalLivestreamIdGet: async (livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1SalesPhysicalLivestreamIdGet.');
            }
            const localVarPath = `/api/v1/Sales/physical/{livestreamId}`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesPhysicalUnsoldUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1SalesPhysicalUnsoldUserIdGet.');
            }
            const localVarPath = `/api/v1/Sales/physical/unsold/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} directSaleId 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost: async (directSaleId: string, quantity: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'directSaleId' is not null or undefined
            if (directSaleId === null || directSaleId === undefined) {
                throw new RequiredError('directSaleId','Required parameter directSaleId was null or undefined when calling apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost.');
            }
            const localVarPath = `/api/v1/Sales/purchasePhysicalDirectSale/{directSaleId}/{quantity}`
                .replace(`{${"directSaleId"}}`, encodeURIComponent(String(directSaleId)))
                .replace(`{${"quantity"}}`, encodeURIComponent(String(quantity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} directSaleId 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesPurchasedirectsaleDirectSaleIdPost: async (directSaleId: string, nftName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'directSaleId' is not null or undefined
            if (directSaleId === null || directSaleId === undefined) {
                throw new RequiredError('directSaleId','Required parameter directSaleId was null or undefined when calling apiV1SalesPurchasedirectsaleDirectSaleIdPost.');
            }
            const localVarPath = `/api/v1/Sales/purchasedirectsale/{directSaleId}`
                .replace(`{${"directSaleId"}}`, encodeURIComponent(String(directSaleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nftName !== undefined) {
                localVarQueryParameter['nftName'] = nftName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSaleTransferSaleIdLivestreamIdPost: async (saleId: string, livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesSaleTransferSaleIdLivestreamIdPost.');
            }
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1SalesSaleTransferSaleIdLivestreamIdPost.');
            }
            const localVarPath = `/api/v1/Sales/sale/transfer/{saleId}/{livestreamId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)))
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BuyOrder} [body] 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSaveOfferPost: async (body?: BuyOrder, nftName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/SaveOffer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nftName !== undefined) {
                localVarQueryParameter['nftName'] = nftName;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaleWithPhysicalAsset} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesSavePhysicalSalePost: async (body?: SaleWithPhysicalAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/SavePhysicalSale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAuctionStartTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesStartAuctionPost: async (body?: UpdateAuctionStartTimeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/StartAuction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesStartGiveawaySaleIdPost: async (saleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesStartGiveawaySaleIdPost.');
            }
            const localVarPath = `/api/v1/Sales/startGiveaway/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaleWithAssets} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesUpdatePut: async (body?: SaleWithAssets, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Sales/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {UpdateSaleRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesUpdateSalePriceSaleIdPut: async (saleId: string, body?: UpdateSaleRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleId' is not null or undefined
            if (saleId === null || saleId === undefined) {
                throw new RequiredError('saleId','Required parameter saleId was null or undefined when calling apiV1SalesUpdateSalePriceSaleIdPut.');
            }
            const localVarPath = `/api/v1/Sales/updateSalePrice/{saleId}`
                .replace(`{${"saleId"}}`, encodeURIComponent(String(saleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesApi - functional programming interface
 * @export
 */
export const SalesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} buyOrderId 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesAcceptOfferBuyOrderIdPost(buyOrderId: string, nftName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesAcceptOfferBuyOrderIdPost(buyOrderId, nftName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<Sale>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesBulkCreatePost(body?: Array<Sale>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesBulkCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesBuyorderIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BuyOrder>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesBuyorderIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateAuctionEndTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCancelAuctionPost(body?: UpdateAuctionEndTimeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesCancelAuctionPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} buyOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCancelofferBuyOrderIdDelete(buyOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesCancelofferBuyOrderIdDelete(buyOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} walletAssetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCancelsaleWalletAssetIdPost(walletAssetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesCancelsaleWalletAssetIdPost(walletAssetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {BuyOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCreateBuyOrderPost(body?: BuyOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BuyOrder>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesCreateBuyOrderPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SaleWithAssets} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCreatePost(body?: SaleWithAssets, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesDeleteSaleSaleIdDelete(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesDeleteSaleSaleIdDelete(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateAuctionEndTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEndAuctionPost(body?: UpdateAuctionEndTimeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesEndAuctionPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EndGiveawayRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEndGiveawayPost(body?: EndGiveawayRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesEndGiveawayPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {string} livestreamId 
         * @param {number} [quantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEndlivesaleSaleIdLivestreamIdPost(saleId: string, livestreamId: string, quantity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesEndlivesaleSaleIdLivestreamIdPost(saleId, livestreamId, quantity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEnterGiveawaySaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesEnterGiveawaySaleIdPost(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserOfferRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetOffersForUserPost(body?: UserOfferRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserOfferResponse>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesGetOffersForUserPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetSalesSoldInMarketplaceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserSaleResponseModel>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesGetSalesSoldInMarketplaceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetUserAssetsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SaleWithAssets>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesGetUserAssetsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetUserOfferForSaleSaleIdGet(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BuyOrder>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesGetUserOfferForSaleSaleIdGet(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetUserPhysicalOrdersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<UserOrder>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesGetUserPhysicalOrdersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGiveawayEntryCountSaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<number>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesGiveawayEntryCountSaleIdPost(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SaleWithAssets>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdGetSaleStatusGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SaleStatusResponse>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesIdGetSaleStatusGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdGetWinningBuyOrderGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BuyOrder>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesIdGetWinningBuyOrderGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdPhysicalGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SaleWithPhysicalAsset>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesIdPhysicalGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIsGiveawayEnteredSaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesIsGiveawayEnteredSaleIdPost(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} walletAssetId 
         * @param {SaleWithAssets} [body] 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesListforsaleWalletAssetIdPost(walletAssetId: string, body?: SaleWithAssets, nftName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesListforsaleWalletAssetIdPost(walletAssetId, body, nftName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesMarkOrderAsDeliveredOrderIdPost(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesMarkOrderAsDeliveredOrderIdPost(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOffersSaleIdGet(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SaleOfferResponseModel>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesOffersSaleIdGet(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesParentParentIdGet(parentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SaleWithAssets>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesParentParentIdGet(parentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPhysicalLivestreamIdGet(livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SaleWithPhysicalAsset>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesPhysicalLivestreamIdGet(livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPhysicalUnsoldUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SaleWithPhysicalAsset>>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesPhysicalUnsoldUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} directSaleId 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost(directSaleId: string, quantity: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost(directSaleId, quantity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} directSaleId 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPurchasedirectsaleDirectSaleIdPost(directSaleId: string, nftName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesPurchasedirectsaleDirectSaleIdPost(directSaleId, nftName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesSaleTransferSaleIdLivestreamIdPost(saleId: string, livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesSaleTransferSaleIdLivestreamIdPost(saleId, livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {BuyOrder} [body] 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesSaveOfferPost(body?: BuyOrder, nftName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BuyOrder>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesSaveOfferPost(body, nftName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SaleWithPhysicalAsset} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesSavePhysicalSalePost(body?: SaleWithPhysicalAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesSavePhysicalSalePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateAuctionStartTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesStartAuctionPost(body?: UpdateAuctionStartTimeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesStartAuctionPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesStartGiveawaySaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesStartGiveawaySaleIdPost(saleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SaleWithAssets} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesUpdatePut(body?: SaleWithAssets, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesUpdatePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} saleId 
         * @param {UpdateSaleRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesUpdateSalePriceSaleIdPut(saleId: string, body?: UpdateSaleRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Sale>>> {
            const localVarAxiosArgs = await SalesApiAxiosParamCreator(configuration).apiV1SalesUpdateSalePriceSaleIdPut(saleId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SalesApi - factory interface
 * @export
 */
export const SalesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} buyOrderId 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesAcceptOfferBuyOrderIdPost(buyOrderId: string, nftName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SalesApiFp(configuration).apiV1SalesAcceptOfferBuyOrderIdPost(buyOrderId, nftName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<Sale>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesBulkCreatePost(body?: Array<Sale>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesBulkCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesBuyorderIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BuyOrder>> {
            return SalesApiFp(configuration).apiV1SalesBuyorderIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAuctionEndTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCancelAuctionPost(body?: UpdateAuctionEndTimeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesCancelAuctionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} buyOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCancelofferBuyOrderIdDelete(buyOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SalesApiFp(configuration).apiV1SalesCancelofferBuyOrderIdDelete(buyOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} walletAssetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCancelsaleWalletAssetIdPost(walletAssetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SalesApiFp(configuration).apiV1SalesCancelsaleWalletAssetIdPost(walletAssetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BuyOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCreateBuyOrderPost(body?: BuyOrder, options?: AxiosRequestConfig): Promise<AxiosResponse<BuyOrder>> {
            return SalesApiFp(configuration).apiV1SalesCreateBuyOrderPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaleWithAssets} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesCreatePost(body?: SaleWithAssets, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesDeleteSaleSaleIdDelete(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesDeleteSaleSaleIdDelete(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAuctionEndTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEndAuctionPost(body?: UpdateAuctionEndTimeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesEndAuctionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EndGiveawayRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEndGiveawayPost(body?: EndGiveawayRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesEndGiveawayPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {string} livestreamId 
         * @param {number} [quantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEndlivesaleSaleIdLivestreamIdPost(saleId: string, livestreamId: string, quantity?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesEndlivesaleSaleIdLivestreamIdPost(saleId, livestreamId, quantity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesEnterGiveawaySaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesEnterGiveawaySaleIdPost(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserOfferRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetOffersForUserPost(body?: UserOfferRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserOfferResponse>>> {
            return SalesApiFp(configuration).apiV1SalesGetOffersForUserPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetSalesSoldInMarketplaceGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserSaleResponseModel>>> {
            return SalesApiFp(configuration).apiV1SalesGetSalesSoldInMarketplaceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetUserAssetsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SaleWithAssets>>> {
            return SalesApiFp(configuration).apiV1SalesGetUserAssetsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetUserOfferForSaleSaleIdGet(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BuyOrder>> {
            return SalesApiFp(configuration).apiV1SalesGetUserOfferForSaleSaleIdGet(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGetUserPhysicalOrdersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<UserOrder>>> {
            return SalesApiFp(configuration).apiV1SalesGetUserPhysicalOrdersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesGiveawayEntryCountSaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<number>> {
            return SalesApiFp(configuration).apiV1SalesGiveawayEntryCountSaleIdPost(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SaleWithAssets>> {
            return SalesApiFp(configuration).apiV1SalesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdGetSaleStatusGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SaleStatusResponse>> {
            return SalesApiFp(configuration).apiV1SalesIdGetSaleStatusGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdGetWinningBuyOrderGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BuyOrder>> {
            return SalesApiFp(configuration).apiV1SalesIdGetWinningBuyOrderGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIdPhysicalGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SaleWithPhysicalAsset>> {
            return SalesApiFp(configuration).apiV1SalesIdPhysicalGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesIsGiveawayEnteredSaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SalesApiFp(configuration).apiV1SalesIsGiveawayEnteredSaleIdPost(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} walletAssetId 
         * @param {SaleWithAssets} [body] 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesListforsaleWalletAssetIdPost(walletAssetId: string, body?: SaleWithAssets, nftName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesListforsaleWalletAssetIdPost(walletAssetId, body, nftName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesMarkOrderAsDeliveredOrderIdPost(orderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesMarkOrderAsDeliveredOrderIdPost(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOffersSaleIdGet(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SaleOfferResponseModel>>> {
            return SalesApiFp(configuration).apiV1SalesOffersSaleIdGet(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesParentParentIdGet(parentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SaleWithAssets>>> {
            return SalesApiFp(configuration).apiV1SalesParentParentIdGet(parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPhysicalLivestreamIdGet(livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SaleWithPhysicalAsset>>> {
            return SalesApiFp(configuration).apiV1SalesPhysicalLivestreamIdGet(livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPhysicalUnsoldUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SaleWithPhysicalAsset>>> {
            return SalesApiFp(configuration).apiV1SalesPhysicalUnsoldUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} directSaleId 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost(directSaleId: string, quantity: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost(directSaleId, quantity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} directSaleId 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesPurchasedirectsaleDirectSaleIdPost(directSaleId: string, nftName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SalesApiFp(configuration).apiV1SalesPurchasedirectsaleDirectSaleIdPost(directSaleId, nftName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesSaleTransferSaleIdLivestreamIdPost(saleId: string, livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesSaleTransferSaleIdLivestreamIdPost(saleId, livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BuyOrder} [body] 
         * @param {string} [nftName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesSaveOfferPost(body?: BuyOrder, nftName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BuyOrder>> {
            return SalesApiFp(configuration).apiV1SalesSaveOfferPost(body, nftName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaleWithPhysicalAsset} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesSavePhysicalSalePost(body?: SaleWithPhysicalAsset, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesSavePhysicalSalePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAuctionStartTimeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesStartAuctionPost(body?: UpdateAuctionStartTimeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesStartAuctionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesStartGiveawaySaleIdPost(saleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesApiFp(configuration).apiV1SalesStartGiveawaySaleIdPost(saleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaleWithAssets} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesUpdatePut(body?: SaleWithAssets, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesUpdatePut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} saleId 
         * @param {UpdateSaleRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesUpdateSalePriceSaleIdPut(saleId: string, body?: UpdateSaleRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<Sale>> {
            return SalesApiFp(configuration).apiV1SalesUpdateSalePriceSaleIdPut(saleId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesApi - object-oriented interface
 * @export
 * @class SalesApi
 * @extends {BaseAPI}
 */
export class SalesApi extends BaseAPI {
    /**
     * 
     * @param {string} buyOrderId 
     * @param {string} [nftName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesAcceptOfferBuyOrderIdPost(buyOrderId: string, nftName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SalesApiFp(this.configuration).apiV1SalesAcceptOfferBuyOrderIdPost(buyOrderId, nftName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array<Sale>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesBulkCreatePost(body?: Array<Sale>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesBulkCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesBuyorderIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BuyOrder>> {
        return SalesApiFp(this.configuration).apiV1SalesBuyorderIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateAuctionEndTimeRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesCancelAuctionPost(body?: UpdateAuctionEndTimeRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesCancelAuctionPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} buyOrderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesCancelofferBuyOrderIdDelete(buyOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SalesApiFp(this.configuration).apiV1SalesCancelofferBuyOrderIdDelete(buyOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} walletAssetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesCancelsaleWalletAssetIdPost(walletAssetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SalesApiFp(this.configuration).apiV1SalesCancelsaleWalletAssetIdPost(walletAssetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {BuyOrder} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesCreateBuyOrderPost(body?: BuyOrder, options?: AxiosRequestConfig) : Promise<AxiosResponse<BuyOrder>> {
        return SalesApiFp(this.configuration).apiV1SalesCreateBuyOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SaleWithAssets} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesCreatePost(body?: SaleWithAssets, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesDeleteSaleSaleIdDelete(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesDeleteSaleSaleIdDelete(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateAuctionEndTimeRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesEndAuctionPost(body?: UpdateAuctionEndTimeRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesEndAuctionPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {EndGiveawayRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesEndGiveawayPost(body?: EndGiveawayRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesEndGiveawayPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {string} livestreamId 
     * @param {number} [quantity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesEndlivesaleSaleIdLivestreamIdPost(saleId: string, livestreamId: string, quantity?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesEndlivesaleSaleIdLivestreamIdPost(saleId, livestreamId, quantity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesEnterGiveawaySaleIdPost(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesEnterGiveawaySaleIdPost(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UserOfferRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesGetOffersForUserPost(body?: UserOfferRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserOfferResponse>>> {
        return SalesApiFp(this.configuration).apiV1SalesGetOffersForUserPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesGetSalesSoldInMarketplaceGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserSaleResponseModel>>> {
        return SalesApiFp(this.configuration).apiV1SalesGetSalesSoldInMarketplaceGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesGetUserAssetsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SaleWithAssets>>> {
        return SalesApiFp(this.configuration).apiV1SalesGetUserAssetsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesGetUserOfferForSaleSaleIdGet(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BuyOrder>> {
        return SalesApiFp(this.configuration).apiV1SalesGetUserOfferForSaleSaleIdGet(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesGetUserPhysicalOrdersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<UserOrder>>> {
        return SalesApiFp(this.configuration).apiV1SalesGetUserPhysicalOrdersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesGiveawayEntryCountSaleIdPost(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<number>> {
        return SalesApiFp(this.configuration).apiV1SalesGiveawayEntryCountSaleIdPost(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SaleWithAssets>> {
        return SalesApiFp(this.configuration).apiV1SalesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesIdGetSaleStatusGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SaleStatusResponse>> {
        return SalesApiFp(this.configuration).apiV1SalesIdGetSaleStatusGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesIdGetWinningBuyOrderGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BuyOrder>> {
        return SalesApiFp(this.configuration).apiV1SalesIdGetWinningBuyOrderGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesIdPhysicalGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SaleWithPhysicalAsset>> {
        return SalesApiFp(this.configuration).apiV1SalesIdPhysicalGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesIsGiveawayEnteredSaleIdPost(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SalesApiFp(this.configuration).apiV1SalesIsGiveawayEnteredSaleIdPost(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} walletAssetId 
     * @param {SaleWithAssets} [body] 
     * @param {string} [nftName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesListforsaleWalletAssetIdPost(walletAssetId: string, body?: SaleWithAssets, nftName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesListforsaleWalletAssetIdPost(walletAssetId, body, nftName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesMarkOrderAsDeliveredOrderIdPost(orderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesMarkOrderAsDeliveredOrderIdPost(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesOffersSaleIdGet(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SaleOfferResponseModel>>> {
        return SalesApiFp(this.configuration).apiV1SalesOffersSaleIdGet(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} parentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesParentParentIdGet(parentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SaleWithAssets>>> {
        return SalesApiFp(this.configuration).apiV1SalesParentParentIdGet(parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesPhysicalLivestreamIdGet(livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SaleWithPhysicalAsset>>> {
        return SalesApiFp(this.configuration).apiV1SalesPhysicalLivestreamIdGet(livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesPhysicalUnsoldUserIdGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SaleWithPhysicalAsset>>> {
        return SalesApiFp(this.configuration).apiV1SalesPhysicalUnsoldUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} directSaleId 
     * @param {number} quantity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost(directSaleId: string, quantity: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesPurchasePhysicalDirectSaleDirectSaleIdQuantityPost(directSaleId, quantity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} directSaleId 
     * @param {string} [nftName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesPurchasedirectsaleDirectSaleIdPost(directSaleId: string, nftName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SalesApiFp(this.configuration).apiV1SalesPurchasedirectsaleDirectSaleIdPost(directSaleId, nftName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesSaleTransferSaleIdLivestreamIdPost(saleId: string, livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesSaleTransferSaleIdLivestreamIdPost(saleId, livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {BuyOrder} [body] 
     * @param {string} [nftName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesSaveOfferPost(body?: BuyOrder, nftName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BuyOrder>> {
        return SalesApiFp(this.configuration).apiV1SalesSaveOfferPost(body, nftName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SaleWithPhysicalAsset} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesSavePhysicalSalePost(body?: SaleWithPhysicalAsset, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesSavePhysicalSalePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateAuctionStartTimeRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesStartAuctionPost(body?: UpdateAuctionStartTimeRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesStartAuctionPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesStartGiveawaySaleIdPost(saleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesApiFp(this.configuration).apiV1SalesStartGiveawaySaleIdPost(saleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SaleWithAssets} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesUpdatePut(body?: SaleWithAssets, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesUpdatePut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} saleId 
     * @param {UpdateSaleRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public async apiV1SalesUpdateSalePriceSaleIdPut(saleId: string, body?: UpdateSaleRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<Sale>> {
        return SalesApiFp(this.configuration).apiV1SalesUpdateSalePriceSaleIdPut(saleId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
