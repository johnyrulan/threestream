/* tslint:disable */
/* eslint-disable */
/**
 * Conifer.NFT.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AllReactionsViewModel } from '../models';
import { ApiErrorResponse } from '../models';
import { CategoryFilterRequest } from '../models';
import { CategoryListViewModel } from '../models';
import { FilterRequest } from '../models';
import { Reaction } from '../models';
import { ReactionType } from '../models';
import { SocialPost } from '../models';
import { SocialPostType } from '../models';
import { SocialPostViewModel } from '../models';
import { User } from '../models';
/**
 * SocialApi - axios parameter creator
 * @export
 */
export const SocialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialAllReactionCountObjectIdGet: async (objectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling apiV1SocialAllReactionCountObjectIdGet.');
            }
            const localVarPath = `/api/v1/Social/allReactionCount/{objectId}`
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialDeletePostPostIdDelete: async (postId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling apiV1SocialDeletePostPostIdDelete.');
            }
            const localVarPath = `/api/v1/Social/deletePost/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} objectId 
         * @param {ReactionType} reactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialDoestReactionExistObjectIdReactionTypeGet: async (objectId: string, reactionType: ReactionType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling apiV1SocialDoestReactionExistObjectIdReactionTypeGet.');
            }
            // verify required parameter 'reactionType' is not null or undefined
            if (reactionType === null || reactionType === undefined) {
                throw new RequiredError('reactionType','Required parameter reactionType was null or undefined when calling apiV1SocialDoestReactionExistObjectIdReactionTypeGet.');
            }
            const localVarPath = `/api/v1/Social/doestReactionExist/{objectId}/{reactionType}`
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"reactionType"}}`, encodeURIComponent(String(reactionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Social`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGetBlockedUsersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Social/GetBlockedUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGetByParentIdParentIdGet: async (parentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new RequiredError('parentId','Required parameter parentId was null or undefined when calling apiV1SocialGetByParentIdParentIdGet.');
            }
            const localVarPath = `/api/v1/Social/getByParentId/{parentId}`
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGetHiddenPostsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Social/GetHiddenPosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {boolean} includeAll 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGetLatestPostsPostTypeIncludeAllGet: async (postType: SocialPostType, includeAll: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postType' is not null or undefined
            if (postType === null || postType === undefined) {
                throw new RequiredError('postType','Required parameter postType was null or undefined when calling apiV1SocialGetLatestPostsPostTypeIncludeAllGet.');
            }
            // verify required parameter 'includeAll' is not null or undefined
            if (includeAll === null || includeAll === undefined) {
                throw new RequiredError('includeAll','Required parameter includeAll was null or undefined when calling apiV1SocialGetLatestPostsPostTypeIncludeAllGet.');
            }
            const localVarPath = `/api/v1/Social/getLatestPosts/{postType}/{includeAll}`
                .replace(`{${"postType"}}`, encodeURIComponent(String(postType)))
                .replace(`{${"includeAll"}}`, encodeURIComponent(String(includeAll)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {FilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGetLatestPostsWithFilterPostTypePost: async (postType: SocialPostType, body?: FilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postType' is not null or undefined
            if (postType === null || postType === undefined) {
                throw new RequiredError('postType','Required parameter postType was null or undefined when calling apiV1SocialGetLatestPostsWithFilterPostTypePost.');
            }
            const localVarPath = `/api/v1/Social/getLatestPostsWithFilter/{postType}`
                .replace(`{${"postType"}}`, encodeURIComponent(String(postType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {CategoryFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialGetPostsWithCategoryFilterPostTypePost: async (postType: SocialPostType, body?: CategoryFilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postType' is not null or undefined
            if (postType === null || postType === undefined) {
                throw new RequiredError('postType','Required parameter postType was null or undefined when calling apiV1SocialGetPostsWithCategoryFilterPostTypePost.');
            }
            const localVarPath = `/api/v1/Social/getPostsWithCategoryFilter/{postType}`
                .replace(`{${"postType"}}`, encodeURIComponent(String(postType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SocialIdGet.');
            }
            const localVarPath = `/api/v1/Social/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} objectId 
         * @param {ReactionType} reactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialReactionCountObjectIdReactionTypeGet: async (objectId: string, reactionType: ReactionType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling apiV1SocialReactionCountObjectIdReactionTypeGet.');
            }
            // verify required parameter 'reactionType' is not null or undefined
            if (reactionType === null || reactionType === undefined) {
                throw new RequiredError('reactionType','Required parameter reactionType was null or undefined when calling apiV1SocialReactionCountObjectIdReactionTypeGet.');
            }
            const localVarPath = `/api/v1/Social/reactionCount/{objectId}/{reactionType}`
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"reactionType"}}`, encodeURIComponent(String(reactionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialPost} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialSavePost: async (body?: SocialPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Social/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Reaction} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialToggleReactionPost: async (body?: Reaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Social/ToggleReaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialUserIdFollowersGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1SocialUserIdFollowersGet.');
            }
            const localVarPath = `/api/v1/Social/{userId}/followers`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialUserIdFollowingGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1SocialUserIdFollowingGet.');
            }
            const localVarPath = `/api/v1/Social/{userId}/following`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialUserIdIsFollowerGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1SocialUserIdIsFollowerGet.');
            }
            const localVarPath = `/api/v1/Social/{userId}/isFollower`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialUserIdToggleFollowPost: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1SocialUserIdToggleFollowPost.');
            }
            const localVarPath = `/api/v1/Social/{userId}/toggleFollow`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {SocialPostType} postType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SocialUserUserIdPostTypeGet: async (userId: string, postType: SocialPostType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1SocialUserUserIdPostTypeGet.');
            }
            // verify required parameter 'postType' is not null or undefined
            if (postType === null || postType === undefined) {
                throw new RequiredError('postType','Required parameter postType was null or undefined when calling apiV1SocialUserUserIdPostTypeGet.');
            }
            const localVarPath = `/api/v1/Social/user/{userId}/{postType}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"postType"}}`, encodeURIComponent(String(postType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialApi - functional programming interface
 * @export
 */
export const SocialApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialAllReactionCountObjectIdGet(objectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AllReactionsViewModel>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialAllReactionCountObjectIdGet(objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialDeletePostPostIdDelete(postId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialDeletePostPostIdDelete(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} objectId 
         * @param {ReactionType} reactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialDoestReactionExistObjectIdReactionTypeGet(objectId: string, reactionType: ReactionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialDoestReactionExistObjectIdReactionTypeGet(objectId, reactionType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CategoryListViewModel>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetBlockedUsersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGetBlockedUsersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetByParentIdParentIdGet(parentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SocialPost>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGetByParentIdParentIdGet(parentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetHiddenPostsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGetHiddenPostsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {boolean} includeAll 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetLatestPostsPostTypeIncludeAllGet(postType: SocialPostType, includeAll: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SocialPostViewModel>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGetLatestPostsPostTypeIncludeAllGet(postType, includeAll, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {FilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetLatestPostsWithFilterPostTypePost(postType: SocialPostType, body?: FilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SocialPostViewModel>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGetLatestPostsWithFilterPostTypePost(postType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {CategoryFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetPostsWithCategoryFilterPostTypePost(postType: SocialPostType, body?: CategoryFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SocialPostViewModel>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialGetPostsWithCategoryFilterPostTypePost(postType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SocialPostViewModel>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} objectId 
         * @param {ReactionType} reactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialReactionCountObjectIdReactionTypeGet(objectId: string, reactionType: ReactionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<number>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialReactionCountObjectIdReactionTypeGet(objectId, reactionType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SocialPost} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialSavePost(body?: SocialPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SocialPost>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialSavePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Reaction} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialToggleReactionPost(body?: Reaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialToggleReactionPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdFollowersGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<User>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialUserIdFollowersGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdFollowingGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<User>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialUserIdFollowingGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdIsFollowerGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialUserIdIsFollowerGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdToggleFollowPost(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialUserIdToggleFollowPost(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {SocialPostType} postType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserUserIdPostTypeGet(userId: string, postType: SocialPostType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SocialPostViewModel>>>> {
            const localVarAxiosArgs = await SocialApiAxiosParamCreator(configuration).apiV1SocialUserUserIdPostTypeGet(userId, postType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SocialApi - factory interface
 * @export
 */
export const SocialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialAllReactionCountObjectIdGet(objectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AllReactionsViewModel>> {
            return SocialApiFp(configuration).apiV1SocialAllReactionCountObjectIdGet(objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialDeletePostPostIdDelete(postId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SocialApiFp(configuration).apiV1SocialDeletePostPostIdDelete(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} objectId 
         * @param {ReactionType} reactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialDoestReactionExistObjectIdReactionTypeGet(objectId: string, reactionType: ReactionType, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SocialApiFp(configuration).apiV1SocialDoestReactionExistObjectIdReactionTypeGet(objectId, reactionType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CategoryListViewModel>>> {
            return SocialApiFp(configuration).apiV1SocialGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetBlockedUsersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return SocialApiFp(configuration).apiV1SocialGetBlockedUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetByParentIdParentIdGet(parentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SocialPost>>> {
            return SocialApiFp(configuration).apiV1SocialGetByParentIdParentIdGet(parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetHiddenPostsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return SocialApiFp(configuration).apiV1SocialGetHiddenPostsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {boolean} includeAll 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetLatestPostsPostTypeIncludeAllGet(postType: SocialPostType, includeAll: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SocialPostViewModel>>> {
            return SocialApiFp(configuration).apiV1SocialGetLatestPostsPostTypeIncludeAllGet(postType, includeAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {FilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetLatestPostsWithFilterPostTypePost(postType: SocialPostType, body?: FilterRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SocialPostViewModel>>> {
            return SocialApiFp(configuration).apiV1SocialGetLatestPostsWithFilterPostTypePost(postType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialPostType} postType 
         * @param {CategoryFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialGetPostsWithCategoryFilterPostTypePost(postType: SocialPostType, body?: CategoryFilterRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SocialPostViewModel>>> {
            return SocialApiFp(configuration).apiV1SocialGetPostsWithCategoryFilterPostTypePost(postType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SocialPostViewModel>> {
            return SocialApiFp(configuration).apiV1SocialIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} objectId 
         * @param {ReactionType} reactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialReactionCountObjectIdReactionTypeGet(objectId: string, reactionType: ReactionType, options?: AxiosRequestConfig): Promise<AxiosResponse<number>> {
            return SocialApiFp(configuration).apiV1SocialReactionCountObjectIdReactionTypeGet(objectId, reactionType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialPost} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialSavePost(body?: SocialPost, options?: AxiosRequestConfig): Promise<AxiosResponse<SocialPost>> {
            return SocialApiFp(configuration).apiV1SocialSavePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Reaction} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialToggleReactionPost(body?: Reaction, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SocialApiFp(configuration).apiV1SocialToggleReactionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdFollowersGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<User>>> {
            return SocialApiFp(configuration).apiV1SocialUserIdFollowersGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdFollowingGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<User>>> {
            return SocialApiFp(configuration).apiV1SocialUserIdFollowingGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdIsFollowerGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SocialApiFp(configuration).apiV1SocialUserIdIsFollowerGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserIdToggleFollowPost(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return SocialApiFp(configuration).apiV1SocialUserIdToggleFollowPost(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {SocialPostType} postType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SocialUserUserIdPostTypeGet(userId: string, postType: SocialPostType, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SocialPostViewModel>>> {
            return SocialApiFp(configuration).apiV1SocialUserUserIdPostTypeGet(userId, postType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SocialApi - object-oriented interface
 * @export
 * @class SocialApi
 * @extends {BaseAPI}
 */
export class SocialApi extends BaseAPI {
    /**
     * 
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialAllReactionCountObjectIdGet(objectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AllReactionsViewModel>> {
        return SocialApiFp(this.configuration).apiV1SocialAllReactionCountObjectIdGet(objectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialDeletePostPostIdDelete(postId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SocialApiFp(this.configuration).apiV1SocialDeletePostPostIdDelete(postId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} objectId 
     * @param {ReactionType} reactionType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialDoestReactionExistObjectIdReactionTypeGet(objectId: string, reactionType: ReactionType, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SocialApiFp(this.configuration).apiV1SocialDoestReactionExistObjectIdReactionTypeGet(objectId, reactionType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CategoryListViewModel>>> {
        return SocialApiFp(this.configuration).apiV1SocialGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGetBlockedUsersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return SocialApiFp(this.configuration).apiV1SocialGetBlockedUsersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} parentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGetByParentIdParentIdGet(parentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SocialPost>>> {
        return SocialApiFp(this.configuration).apiV1SocialGetByParentIdParentIdGet(parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGetHiddenPostsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return SocialApiFp(this.configuration).apiV1SocialGetHiddenPostsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SocialPostType} postType 
     * @param {boolean} includeAll 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGetLatestPostsPostTypeIncludeAllGet(postType: SocialPostType, includeAll: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SocialPostViewModel>>> {
        return SocialApiFp(this.configuration).apiV1SocialGetLatestPostsPostTypeIncludeAllGet(postType, includeAll, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SocialPostType} postType 
     * @param {FilterRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGetLatestPostsWithFilterPostTypePost(postType: SocialPostType, body?: FilterRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SocialPostViewModel>>> {
        return SocialApiFp(this.configuration).apiV1SocialGetLatestPostsWithFilterPostTypePost(postType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SocialPostType} postType 
     * @param {CategoryFilterRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialGetPostsWithCategoryFilterPostTypePost(postType: SocialPostType, body?: CategoryFilterRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SocialPostViewModel>>> {
        return SocialApiFp(this.configuration).apiV1SocialGetPostsWithCategoryFilterPostTypePost(postType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SocialPostViewModel>> {
        return SocialApiFp(this.configuration).apiV1SocialIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} objectId 
     * @param {ReactionType} reactionType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialReactionCountObjectIdReactionTypeGet(objectId: string, reactionType: ReactionType, options?: AxiosRequestConfig) : Promise<AxiosResponse<number>> {
        return SocialApiFp(this.configuration).apiV1SocialReactionCountObjectIdReactionTypeGet(objectId, reactionType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SocialPost} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialSavePost(body?: SocialPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<SocialPost>> {
        return SocialApiFp(this.configuration).apiV1SocialSavePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Reaction} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialToggleReactionPost(body?: Reaction, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SocialApiFp(this.configuration).apiV1SocialToggleReactionPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialUserIdFollowersGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<User>>> {
        return SocialApiFp(this.configuration).apiV1SocialUserIdFollowersGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialUserIdFollowingGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<User>>> {
        return SocialApiFp(this.configuration).apiV1SocialUserIdFollowingGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialUserIdIsFollowerGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SocialApiFp(this.configuration).apiV1SocialUserIdIsFollowerGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialUserIdToggleFollowPost(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return SocialApiFp(this.configuration).apiV1SocialUserIdToggleFollowPost(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {SocialPostType} postType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public async apiV1SocialUserUserIdPostTypeGet(userId: string, postType: SocialPostType, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SocialPostViewModel>>> {
        return SocialApiFp(this.configuration).apiV1SocialUserUserIdPostTypeGet(userId, postType, options).then((request) => request(this.axios, this.basePath));
    }
}
