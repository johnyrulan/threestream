/* tslint:disable */
/* eslint-disable */
/**
 * Conifer.NFT.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiErrorResponse } from '../models';
import { Giveaway } from '../models';
import { GiveawayParticipant } from '../models';
/**
 * GiveawayApi - axios parameter creator
 * @export
 */
export const GiveawayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} giveawayId 
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GiveawayEnterGiveawayGiveawayIdCountPost: async (giveawayId: string, count: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'giveawayId' is not null or undefined
            if (giveawayId === null || giveawayId === undefined) {
                throw new RequiredError('giveawayId','Required parameter giveawayId was null or undefined when calling apiV1GiveawayEnterGiveawayGiveawayIdCountPost.');
            }
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling apiV1GiveawayEnterGiveawayGiveawayIdCountPost.');
            }
            const localVarPath = `/api/v1/Giveaway/enterGiveaway/{giveawayId}/{count}`
                .replace(`{${"giveawayId"}}`, encodeURIComponent(String(giveawayId)))
                .replace(`{${"count"}}`, encodeURIComponent(String(count)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GiveawayGetActiveGiveawayGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Giveaway/GetActiveGiveaway`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet.');
            }
            const localVarPath = `/api/v1/Giveaway/GetAvailableGiveawayEntriesCount/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} giveawayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet: async (userId: string, giveawayId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet.');
            }
            // verify required parameter 'giveawayId' is not null or undefined
            if (giveawayId === null || giveawayId === undefined) {
                throw new RequiredError('giveawayId','Required parameter giveawayId was null or undefined when calling apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet.');
            }
            const localVarPath = `/api/v1/Giveaway/GetEnteredGiveawayEntriesCount/{userId}/{giveawayId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"giveawayId"}}`, encodeURIComponent(String(giveawayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} giveawayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet: async (giveawayId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'giveawayId' is not null or undefined
            if (giveawayId === null || giveawayId === undefined) {
                throw new RequiredError('giveawayId','Required parameter giveawayId was null or undefined when calling apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet.');
            }
            const localVarPath = `/api/v1/Giveaway/GetGiveawayParticipants/{giveawayId}`
                .replace(`{${"giveawayId"}}`, encodeURIComponent(String(giveawayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiveawayApi - functional programming interface
 * @export
 */
export const GiveawayApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} giveawayId 
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayEnterGiveawayGiveawayIdCountPost(giveawayId: string, count: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GiveawayApiAxiosParamCreator(configuration).apiV1GiveawayEnterGiveawayGiveawayIdCountPost(giveawayId, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetActiveGiveawayGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Giveaway>>> {
            const localVarAxiosArgs = await GiveawayApiAxiosParamCreator(configuration).apiV1GiveawayGetActiveGiveawayGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<number>>> {
            const localVarAxiosArgs = await GiveawayApiAxiosParamCreator(configuration).apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} giveawayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet(userId: string, giveawayId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<number>>> {
            const localVarAxiosArgs = await GiveawayApiAxiosParamCreator(configuration).apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet(userId, giveawayId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} giveawayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet(giveawayId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GiveawayParticipant>>>> {
            const localVarAxiosArgs = await GiveawayApiAxiosParamCreator(configuration).apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet(giveawayId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GiveawayApi - factory interface
 * @export
 */
export const GiveawayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} giveawayId 
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayEnterGiveawayGiveawayIdCountPost(giveawayId: string, count: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GiveawayApiFp(configuration).apiV1GiveawayEnterGiveawayGiveawayIdCountPost(giveawayId, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetActiveGiveawayGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Giveaway>> {
            return GiveawayApiFp(configuration).apiV1GiveawayGetActiveGiveawayGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<number>> {
            return GiveawayApiFp(configuration).apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} giveawayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet(userId: string, giveawayId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<number>> {
            return GiveawayApiFp(configuration).apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet(userId, giveawayId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} giveawayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet(giveawayId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GiveawayParticipant>>> {
            return GiveawayApiFp(configuration).apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet(giveawayId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiveawayApi - object-oriented interface
 * @export
 * @class GiveawayApi
 * @extends {BaseAPI}
 */
export class GiveawayApi extends BaseAPI {
    /**
     * 
     * @param {string} giveawayId 
     * @param {number} count 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveawayApi
     */
    public async apiV1GiveawayEnterGiveawayGiveawayIdCountPost(giveawayId: string, count: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GiveawayApiFp(this.configuration).apiV1GiveawayEnterGiveawayGiveawayIdCountPost(giveawayId, count, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveawayApi
     */
    public async apiV1GiveawayGetActiveGiveawayGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Giveaway>> {
        return GiveawayApiFp(this.configuration).apiV1GiveawayGetActiveGiveawayGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveawayApi
     */
    public async apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<number>> {
        return GiveawayApiFp(this.configuration).apiV1GiveawayGetAvailableGiveawayEntriesCountUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {string} giveawayId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveawayApi
     */
    public async apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet(userId: string, giveawayId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<number>> {
        return GiveawayApiFp(this.configuration).apiV1GiveawayGetEnteredGiveawayEntriesCountUserIdGiveawayIdGet(userId, giveawayId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} giveawayId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveawayApi
     */
    public async apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet(giveawayId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GiveawayParticipant>>> {
        return GiveawayApiFp(this.configuration).apiV1GiveawayGetGiveawayParticipantsGiveawayIdGet(giveawayId, options).then((request) => request(this.axios, this.basePath));
    }
}
