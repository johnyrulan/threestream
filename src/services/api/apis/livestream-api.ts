/* tslint:disable */
/* eslint-disable */
/**
 * Conifer.NFT.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiErrorResponse } from '../models';
import { CategoryFilterRequest } from '../models';
import { FilterRequest } from '../models';
import { LiveStreamWithTotalSales } from '../models';
import { Livestream } from '../models';
import { LivestreamViewModel } from '../models';
import { SaleWithAssets } from '../models';
import { SaveLivestreamRequest } from '../models';
import { User } from '../models';
/**
 * LivestreamApi - axios parameter creator
 * @export
 */
export const LivestreamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost: async (livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost.');
            }
            const localVarPath = `/api/v1/Livestream/addUserToRealTimeService/{livestreamId}`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} toUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamCostreamLivestreamIdToUserIdPost: async (livestreamId: string, toUserId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamCostreamLivestreamIdToUserIdPost.');
            }
            // verify required parameter 'toUserId' is not null or undefined
            if (toUserId === null || toUserId === undefined) {
                throw new RequiredError('toUserId','Required parameter toUserId was null or undefined when calling apiV1LivestreamCostreamLivestreamIdToUserIdPost.');
            }
            const localVarPath = `/api/v1/Livestream/costream/{livestreamId}/{toUserId}`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)))
                .replace(`{${"toUserId"}}`, encodeURIComponent(String(toUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamGetAllLivestreamsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream/GetAllLivestreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamGetAllLivestreamsWithTotalSalesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream/GetAllLivestreamsWithTotalSales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamGetChatUserTokenGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream/GetChatUserToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamGetCurrentLivestreamsPost: async (body?: FilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream/GetCurrentLivestreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoryFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamGetLivestreamsByCategoryPost: async (body?: CategoryFilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream/GetLivestreamsByCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1LivestreamIdGet.');
            }
            const localVarPath = `/api/v1/Livestream/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamIdSalesGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1LivestreamIdSalesGet.');
            }
            const localVarPath = `/api/v1/Livestream/{id}/sales`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} inviteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost: async (livestreamId: string, inviteId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost.');
            }
            // verify required parameter 'inviteId' is not null or undefined
            if (inviteId === null || inviteId === undefined) {
                throw new RequiredError('inviteId','Required parameter inviteId was null or undefined when calling apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost.');
            }
            const localVarPath = `/api/v1/Livestream/isValidCostreamInvite/{livestreamId}/{inviteId}`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)))
                .replace(`{${"inviteId"}}`, encodeURIComponent(String(inviteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveStreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet: async (liveStreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            if (liveStreamId === null || liveStreamId === undefined) {
                throw new RequiredError('liveStreamId','Required parameter liveStreamId was null or undefined when calling apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet.');
            }
            const localVarPath = `/api/v1/Livestream/{liveStreamId}/GetUsersWhoWonAuction`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} liveStreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet: async (liveStreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            if (liveStreamId === null || liveStreamId === undefined) {
                throw new RequiredError('liveStreamId','Required parameter liveStreamId was null or undefined when calling apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet.');
            }
            const localVarPath = `/api/v1/Livestream/{liveStreamId}/GetUsersWithPlacedBids`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamLivestreamIdBannedusersGet: async (livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamLivestreamIdBannedusersGet.');
            }
            const localVarPath = `/api/v1/Livestream/{livestreamId}/bannedusers`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamLivestreamIdDelete: async (livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamLivestreamIdDelete.');
            }
            const localVarPath = `/api/v1/Livestream/{livestreamId}`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamLivestreamIdUserIdAssignPut: async (livestreamId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamLivestreamIdUserIdAssignPut.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1LivestreamLivestreamIdUserIdAssignPut.');
            }
            const localVarPath = `/api/v1/Livestream/{livestreamId}/{userId}/assign`
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaveLivestreamRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamPost: async (body?: SaveLivestreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaveLivestreamRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamPut: async (body?: SaveLivestreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fromLivestreamId 
         * @param {string} toLivestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost: async (fromLivestreamId: string, toLivestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromLivestreamId' is not null or undefined
            if (fromLivestreamId === null || fromLivestreamId === undefined) {
                throw new RequiredError('fromLivestreamId','Required parameter fromLivestreamId was null or undefined when calling apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost.');
            }
            // verify required parameter 'toLivestreamId' is not null or undefined
            if (toLivestreamId === null || toLivestreamId === undefined) {
                throw new RequiredError('toLivestreamId','Required parameter toLivestreamId was null or undefined when calling apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost.');
            }
            const localVarPath = `/api/v1/Livestream/raid/{fromLivestreamId}/{toLivestreamId}`
                .replace(`{${"fromLivestreamId"}}`, encodeURIComponent(String(fromLivestreamId)))
                .replace(`{${"toLivestreamId"}}`, encodeURIComponent(String(toLivestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Livestream} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamUpdateLivestreamPut: async (body?: Livestream, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Livestream/UpdateLivestream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamUserIdLivestreamIdBanGet: async (userId: string, livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1LivestreamUserIdLivestreamIdBanGet.');
            }
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamUserIdLivestreamIdBanGet.');
            }
            const localVarPath = `/api/v1/Livestream/{userId}/{livestreamId}/ban`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamUserIdLivestreamIdUnbanGet: async (userId: string, livestreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1LivestreamUserIdLivestreamIdUnbanGet.');
            }
            // verify required parameter 'livestreamId' is not null or undefined
            if (livestreamId === null || livestreamId === undefined) {
                throw new RequiredError('livestreamId','Required parameter livestreamId was null or undefined when calling apiV1LivestreamUserIdLivestreamIdUnbanGet.');
            }
            const localVarPath = `/api/v1/Livestream/{userId}/{livestreamId}/unban`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"livestreamId"}}`, encodeURIComponent(String(livestreamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LivestreamUserIdUserGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1LivestreamUserIdUserGet.');
            }
            const localVarPath = `/api/v1/Livestream/{userId}/user`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LivestreamApi - functional programming interface
 * @export
 */
export const LivestreamApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost(livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost(livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} toUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamCostreamLivestreamIdToUserIdPost(livestreamId: string, toUserId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamCostreamLivestreamIdToUserIdPost(livestreamId, toUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetAllLivestreamsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Livestream>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamGetAllLivestreamsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetAllLivestreamsWithTotalSalesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LiveStreamWithTotalSales>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamGetAllLivestreamsWithTotalSalesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetChatUserTokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamGetChatUserTokenGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {FilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetCurrentLivestreamsPost(body?: FilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Livestream>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamGetCurrentLivestreamsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CategoryFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetLivestreamsByCategoryPost(body?: CategoryFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LivestreamViewModel>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamGetLivestreamsByCategoryPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Livestream>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamIdSalesGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SaleWithAssets>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamIdSalesGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} inviteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost(livestreamId: string, inviteId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost(livestreamId, inviteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} liveStreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet(liveStreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<User>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet(liveStreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} liveStreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet(liveStreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<User>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet(liveStreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLivestreamIdBannedusersGet(livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamLivestreamIdBannedusersGet(livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLivestreamIdDelete(livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamLivestreamIdDelete(livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLivestreamIdUserIdAssignPut(livestreamId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamLivestreamIdUserIdAssignPut(livestreamId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SaveLivestreamRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamPost(body?: SaveLivestreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Livestream>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SaveLivestreamRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamPut(body?: SaveLivestreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Livestream>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} fromLivestreamId 
         * @param {string} toLivestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost(fromLivestreamId: string, toLivestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost(fromLivestreamId, toLivestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Livestream} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUpdateLivestreamPut(body?: Livestream, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Livestream>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamUpdateLivestreamPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUserIdLivestreamIdBanGet(userId: string, livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamUserIdLivestreamIdBanGet(userId, livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUserIdLivestreamIdUnbanGet(userId: string, livestreamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamUserIdLivestreamIdUnbanGet(userId, livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUserIdUserGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Livestream>>>> {
            const localVarAxiosArgs = await LivestreamApiAxiosParamCreator(configuration).apiV1LivestreamUserIdUserGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LivestreamApi - factory interface
 * @export
 */
export const LivestreamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost(livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return LivestreamApiFp(configuration).apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost(livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} toUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamCostreamLivestreamIdToUserIdPost(livestreamId: string, toUserId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return LivestreamApiFp(configuration).apiV1LivestreamCostreamLivestreamIdToUserIdPost(livestreamId, toUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetAllLivestreamsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Livestream>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamGetAllLivestreamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetAllLivestreamsWithTotalSalesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LiveStreamWithTotalSales>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamGetAllLivestreamsWithTotalSalesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetChatUserTokenGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return LivestreamApiFp(configuration).apiV1LivestreamGetChatUserTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetCurrentLivestreamsPost(body?: FilterRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Livestream>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamGetCurrentLivestreamsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamGetLivestreamsByCategoryPost(body?: CategoryFilterRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LivestreamViewModel>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamGetLivestreamsByCategoryPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Livestream>> {
            return LivestreamApiFp(configuration).apiV1LivestreamIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamIdSalesGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SaleWithAssets>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamIdSalesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} inviteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost(livestreamId: string, inviteId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return LivestreamApiFp(configuration).apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost(livestreamId, inviteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveStreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet(liveStreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<User>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet(liveStreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} liveStreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet(liveStreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<User>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet(liveStreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLivestreamIdBannedusersGet(livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamLivestreamIdBannedusersGet(livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLivestreamIdDelete(livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return LivestreamApiFp(configuration).apiV1LivestreamLivestreamIdDelete(livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} livestreamId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamLivestreamIdUserIdAssignPut(livestreamId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return LivestreamApiFp(configuration).apiV1LivestreamLivestreamIdUserIdAssignPut(livestreamId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaveLivestreamRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamPost(body?: SaveLivestreamRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Livestream>> {
            return LivestreamApiFp(configuration).apiV1LivestreamPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaveLivestreamRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamPut(body?: SaveLivestreamRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Livestream>> {
            return LivestreamApiFp(configuration).apiV1LivestreamPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fromLivestreamId 
         * @param {string} toLivestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost(fromLivestreamId: string, toLivestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return LivestreamApiFp(configuration).apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost(fromLivestreamId, toLivestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Livestream} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUpdateLivestreamPut(body?: Livestream, options?: AxiosRequestConfig): Promise<AxiosResponse<Livestream>> {
            return LivestreamApiFp(configuration).apiV1LivestreamUpdateLivestreamPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUserIdLivestreamIdBanGet(userId: string, livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return LivestreamApiFp(configuration).apiV1LivestreamUserIdLivestreamIdBanGet(userId, livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} livestreamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUserIdLivestreamIdUnbanGet(userId: string, livestreamId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return LivestreamApiFp(configuration).apiV1LivestreamUserIdLivestreamIdUnbanGet(userId, livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LivestreamUserIdUserGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Livestream>>> {
            return LivestreamApiFp(configuration).apiV1LivestreamUserIdUserGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LivestreamApi - object-oriented interface
 * @export
 * @class LivestreamApi
 * @extends {BaseAPI}
 */
export class LivestreamApi extends BaseAPI {
    /**
     * 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost(livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamAddUserToRealTimeServiceLivestreamIdPost(livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} livestreamId 
     * @param {string} toUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamCostreamLivestreamIdToUserIdPost(livestreamId: string, toUserId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamCostreamLivestreamIdToUserIdPost(livestreamId, toUserId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamGetAllLivestreamsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Livestream>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamGetAllLivestreamsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamGetAllLivestreamsWithTotalSalesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<LiveStreamWithTotalSales>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamGetAllLivestreamsWithTotalSalesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamGetChatUserTokenGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamGetChatUserTokenGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {FilterRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamGetCurrentLivestreamsPost(body?: FilterRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Livestream>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamGetCurrentLivestreamsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CategoryFilterRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamGetLivestreamsByCategoryPost(body?: CategoryFilterRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<LivestreamViewModel>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamGetLivestreamsByCategoryPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Livestream>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamIdSalesGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SaleWithAssets>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamIdSalesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} livestreamId 
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost(livestreamId: string, inviteId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamIsValidCostreamInviteLivestreamIdInviteIdPost(livestreamId, inviteId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} liveStreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet(liveStreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<User>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamLiveStreamIdGetUsersWhoWonAuctionGet(liveStreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} liveStreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet(liveStreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<User>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamLiveStreamIdGetUsersWithPlacedBidsGet(liveStreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamLivestreamIdBannedusersGet(livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamLivestreamIdBannedusersGet(livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamLivestreamIdDelete(livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamLivestreamIdDelete(livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} livestreamId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamLivestreamIdUserIdAssignPut(livestreamId: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamLivestreamIdUserIdAssignPut(livestreamId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SaveLivestreamRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamPost(body?: SaveLivestreamRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Livestream>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SaveLivestreamRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamPut(body?: SaveLivestreamRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Livestream>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} fromLivestreamId 
     * @param {string} toLivestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost(fromLivestreamId: string, toLivestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamRaidFromLivestreamIdToLivestreamIdPost(fromLivestreamId, toLivestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Livestream} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamUpdateLivestreamPut(body?: Livestream, options?: AxiosRequestConfig) : Promise<AxiosResponse<Livestream>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamUpdateLivestreamPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamUserIdLivestreamIdBanGet(userId: string, livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamUserIdLivestreamIdBanGet(userId, livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {string} livestreamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamUserIdLivestreamIdUnbanGet(userId: string, livestreamId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamUserIdLivestreamIdUnbanGet(userId, livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivestreamApi
     */
    public async apiV1LivestreamUserIdUserGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Livestream>>> {
        return LivestreamApiFp(this.configuration).apiV1LivestreamUserIdUserGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
