/* tslint:disable */
/* eslint-disable */
/**
 * Conifer.NFT.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiErrorResponse } from '../models';
import { AssetPack } from '../models';
import { AssetSalesHistoryResponse } from '../models';
import { Blockchain } from '../models';
import { CreateAssetPackRequestModel } from '../models';
import { WalletAsset } from '../models';
/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAssetPackRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetCreateAssetPacksPost: async (body?: CreateAssetPackRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Asset/CreateAssetPacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetGetAssetByIdIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1AssetGetAssetByIdIdGet.');
            }
            const localVarPath = `/api/v1/Asset/getAssetById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blockchain} blockchain 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet: async (blockchain: Blockchain, contractAddress: string, tokenId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockchain' is not null or undefined
            if (blockchain === null || blockchain === undefined) {
                throw new RequiredError('blockchain','Required parameter blockchain was null or undefined when calling apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet.');
            }
            // verify required parameter 'contractAddress' is not null or undefined
            if (contractAddress === null || contractAddress === undefined) {
                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet.');
            }
            // verify required parameter 'tokenId' is not null or undefined
            if (tokenId === null || tokenId === undefined) {
                throw new RequiredError('tokenId','Required parameter tokenId was null or undefined when calling apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet.');
            }
            const localVarPath = `/api/v1/Asset/getAssetHistory/{blockchain}/{contractAddress}/{tokenId}`
                .replace(`{${"blockchain"}}`, encodeURIComponent(String(blockchain)))
                .replace(`{${"contractAddress"}}`, encodeURIComponent(String(contractAddress)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetGetAssetPacksUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1AssetGetAssetPacksUserIdGet.');
            }
            const localVarPath = `/api/v1/Asset/getAssetPacks/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetGetPackCardsAssetPackIdGet: async (assetPackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetPackId' is not null or undefined
            if (assetPackId === null || assetPackId === undefined) {
                throw new RequiredError('assetPackId','Required parameter assetPackId was null or undefined when calling apiV1AssetGetPackCardsAssetPackIdGet.');
            }
            const localVarPath = `/api/v1/Asset/getPackCards/{assetPackId}`
                .replace(`{${"assetPackId"}}`, encodeURIComponent(String(assetPackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {string} [livestreamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetOpenPackAssetPackIdPost: async (assetPackId: string, livestreamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetPackId' is not null or undefined
            if (assetPackId === null || assetPackId === undefined) {
                throw new RequiredError('assetPackId','Required parameter assetPackId was null or undefined when calling apiV1AssetOpenPackAssetPackIdPost.');
            }
            const localVarPath = `/api/v1/Asset/openPack/{assetPackId}`
                .replace(`{${"assetPackId"}}`, encodeURIComponent(String(assetPackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (livestreamId !== undefined) {
                localVarQueryParameter['livestreamId'] = livestreamId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {number} cardIndex 
         * @param {string} [livestreamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetRevealNextCardAssetPackIdCardIndexPost: async (assetPackId: string, cardIndex: number, livestreamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetPackId' is not null or undefined
            if (assetPackId === null || assetPackId === undefined) {
                throw new RequiredError('assetPackId','Required parameter assetPackId was null or undefined when calling apiV1AssetRevealNextCardAssetPackIdCardIndexPost.');
            }
            // verify required parameter 'cardIndex' is not null or undefined
            if (cardIndex === null || cardIndex === undefined) {
                throw new RequiredError('cardIndex','Required parameter cardIndex was null or undefined when calling apiV1AssetRevealNextCardAssetPackIdCardIndexPost.');
            }
            const localVarPath = `/api/v1/Asset/revealNextCard/{assetPackId}/{cardIndex}`
                .replace(`{${"assetPackId"}}`, encodeURIComponent(String(assetPackId)))
                .replace(`{${"cardIndex"}}`, encodeURIComponent(String(cardIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (livestreamId !== undefined) {
                localVarQueryParameter['livestreamId'] = livestreamId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetUserIdUserGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1AssetUserIdUserGet.');
            }
            const localVarPath = `/api/v1/Asset/{userId}/user`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAssetPackRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetCreateAssetPacksPost(body?: CreateAssetPackRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AssetPack>>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetCreateAssetPacksPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetAssetByIdIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AssetPack>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetGetAssetByIdIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Blockchain} blockchain 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet(blockchain: Blockchain, contractAddress: string, tokenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AssetSalesHistoryResponse>>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet(blockchain, contractAddress, tokenId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetAssetPacksUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AssetPack>>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetGetAssetPacksUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetPackCardsAssetPackIdGet(assetPackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<WalletAsset>>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetGetPackCardsAssetPackIdGet(assetPackId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {string} [livestreamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetOpenPackAssetPackIdPost(assetPackId: string, livestreamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetOpenPackAssetPackIdPost(assetPackId, livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {number} cardIndex 
         * @param {string} [livestreamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetRevealNextCardAssetPackIdCardIndexPost(assetPackId: string, cardIndex: number, livestreamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AssetPack>>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetRevealNextCardAssetPackIdCardIndexPost(assetPackId, cardIndex, livestreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetUserIdUserGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<WalletAsset>>>> {
            const localVarAxiosArgs = await AssetApiAxiosParamCreator(configuration).apiV1AssetUserIdUserGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateAssetPackRequestModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetCreateAssetPacksPost(body?: CreateAssetPackRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AssetPack>>> {
            return AssetApiFp(configuration).apiV1AssetCreateAssetPacksPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetAssetByIdIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AssetPack>> {
            return AssetApiFp(configuration).apiV1AssetGetAssetByIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Blockchain} blockchain 
         * @param {string} contractAddress 
         * @param {string} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet(blockchain: Blockchain, contractAddress: string, tokenId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AssetSalesHistoryResponse>>> {
            return AssetApiFp(configuration).apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet(blockchain, contractAddress, tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetAssetPacksUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AssetPack>>> {
            return AssetApiFp(configuration).apiV1AssetGetAssetPacksUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetGetPackCardsAssetPackIdGet(assetPackId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<WalletAsset>>> {
            return AssetApiFp(configuration).apiV1AssetGetPackCardsAssetPackIdGet(assetPackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {string} [livestreamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetOpenPackAssetPackIdPost(assetPackId: string, livestreamId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AssetApiFp(configuration).apiV1AssetOpenPackAssetPackIdPost(assetPackId, livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetPackId 
         * @param {number} cardIndex 
         * @param {string} [livestreamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetRevealNextCardAssetPackIdCardIndexPost(assetPackId: string, cardIndex: number, livestreamId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AssetPack>>> {
            return AssetApiFp(configuration).apiV1AssetRevealNextCardAssetPackIdCardIndexPost(assetPackId, cardIndex, livestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AssetUserIdUserGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<WalletAsset>>> {
            return AssetApiFp(configuration).apiV1AssetUserIdUserGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
    /**
     * 
     * @param {CreateAssetPackRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetCreateAssetPacksPost(body?: CreateAssetPackRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AssetPack>>> {
        return AssetApiFp(this.configuration).apiV1AssetCreateAssetPacksPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetGetAssetByIdIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AssetPack>> {
        return AssetApiFp(this.configuration).apiV1AssetGetAssetByIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Blockchain} blockchain 
     * @param {string} contractAddress 
     * @param {string} tokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet(blockchain: Blockchain, contractAddress: string, tokenId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AssetSalesHistoryResponse>>> {
        return AssetApiFp(this.configuration).apiV1AssetGetAssetHistoryBlockchainContractAddressTokenIdGet(blockchain, contractAddress, tokenId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetGetAssetPacksUserIdGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AssetPack>>> {
        return AssetApiFp(this.configuration).apiV1AssetGetAssetPacksUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} assetPackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetGetPackCardsAssetPackIdGet(assetPackId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<WalletAsset>>> {
        return AssetApiFp(this.configuration).apiV1AssetGetPackCardsAssetPackIdGet(assetPackId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} assetPackId 
     * @param {string} [livestreamId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetOpenPackAssetPackIdPost(assetPackId: string, livestreamId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AssetApiFp(this.configuration).apiV1AssetOpenPackAssetPackIdPost(assetPackId, livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} assetPackId 
     * @param {number} cardIndex 
     * @param {string} [livestreamId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetRevealNextCardAssetPackIdCardIndexPost(assetPackId: string, cardIndex: number, livestreamId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AssetPack>>> {
        return AssetApiFp(this.configuration).apiV1AssetRevealNextCardAssetPackIdCardIndexPost(assetPackId, cardIndex, livestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public async apiV1AssetUserIdUserGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<WalletAsset>>> {
        return AssetApiFp(this.configuration).apiV1AssetUserIdUserGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
